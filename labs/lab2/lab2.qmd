---
title: "Lab 2"
description: "Time Multiplexing a Dual 7-Segment Display"
author: "Troy Kaufman"
date: "9/13/24"
draft: false
about: 
    template: solana
    links: 
        - icon: github
          text: Github
          href: https://github.com/troyrkaufman/e155_lab2/tree/main/src
---

![Lab2 Setup](images/lab2_setup.jpg)

# Summary

This lab introduced students to a method of reusing valuable resources - multiplexing. In this case, students were required to time multiplex a dual 7-segment display along with illustrating the sum between two hexadecimal numbers shown on the display. SystemVerilog modules were created to build a multiplexing FSM, 7-segment decoder, and adder respectively. This lab took a total of 15 hours to complete. Nine of these hours were focused on debugging a floating value problem in the mechanical design which will be mentioned in the design section. Overall, all requirements were met. 

# Design

A top module instantiated a Lattice Radiant clock, multiplexing FSM, 7-segment decoder, and adder. The main part of this design revolved around an FSM turning on one side of a dual 7-segment display at a time while sending the appropriate hexadecimal data to the segment decoder for the number to be displayed. This FSM included 3 states: S0 (reset), S1 (1st hex number), S2 (2nd hex number). Once the active low reset button was driven, the FSM would alternate from S1 to S2 at a fast enough pace for a human not to notice flickering but slow enough to avoid bleeding the numbers together on the display. The A and Abar signals on the state transistion diagram arcs represent counter inputs to the FSM. Only when the counter has reached a specific value is when the A arc is followed. Otherwise, the Abar arc is followed. 

![State Transistion Diagram](images/lab2_std.jpg)

As mentioned before, there are four submodules in the overall design. Below is the system block diagram. The hex_num_controller module contains the FSM. It will receive a clock and active low reset input. It will output two transistor signals to drive the display and one encoded signal, display_num, to the segment_decoder module. This encoded signal will tell the segment_decoder module which hexadecimal input to illustrate on the display. All the while this happens, an adder in led_sum will sum the two inputs and show the result on five LEDs. 

![Block Diagram](images/lab2_block_diagram.jpg)

To properly multiplex the dual 7-segment display, two PNP transistors controlled their own common anode pins on the display. One would supply a flow of current to a number's segments while the other transistor would limit the current, thus, turning one number on and the other one off. To protect the FPGA from current damage coming from the emitter, a 330 ohm resistor was put in series with the base. This limited the FPGA to output a current of 7.8 mA, below the soft 8 mA recommended maximum output current listed in the [FPGA data sheet](https://hmc-e155.github.io/assets/doc/FPGA-DS-02008-2-0-iCE40-UltraPlus-Family-Data-Sheet.pdf) on Table 4.13 on pg 34. 

The [PNP 2N3906 transistor](https://www.mouser.com/datasheet/2/308/2N3906_D-2309245.pdf) current gain for this particular 
instance can be found on pg 6 in Figure 13. 

The following calculation and explanation shows why a 330 ohm resistor was used in the design. 
![Base Resistor Calculation for Transistors](images/lab2_transistor_calc.jpg)

The current limiting resistors for the cathode inputs into the display and LED sum calculation is as follows: 

![Current Limiting Resistor Calculation](images/lab2_resistor_calc.jpg)

The electrical schematic shown below displays all the electrical components needed to complete the requirements including the dual 7-segment display, DIP switches, and current limiting resistors. Note that the DIP switches are using internal pull-up resistors as noted in the development board's [schematic](https://hmc-e155.github.io/assets/doc/E155%20Development%20Board%20Schematic.pdf)

![Electrical Schematic](images/lab2_schematic.jpg)

As previously mentioned, I did encounter a frustrating issue with floating values in my design. Initial debug attempts were focused at resoldering, using new switch inputs, using new ribbon cable, etc. Eventually, the problem was tracked down to the internal pull-up resistors. Their default values on the Lattice Radiant tool is 100k ohms. I found that using 3.3K ohms was perfect to prevent the floating value problem. 

# Verification

Testbenches were used to verify my design in simulation. The design worked in all testbench assessments. 

The unit 7-segment decoder testbench was used to check if all segments in a hexadecimal number would be driven properly. Stimulants in the testbench tested all 16 numbers. All of them were correct.
![7-Segment Decoder Waveform](images/segment_decoder_image.PNG)

The following testbench checked if the internal encoded display_num signal would be properly set/reset after a given number of clock cycles. The blue signal shows the encoded signal. The purple and orange signals show the current inputs to the transistors for driving the hex number display. We wanted to see the that the FSM behavior would show the encoded signal being driven whilst the hex2_num signal was reset to low and vice versa with the hex1_signal. A high enconded signal with a low hex2_num signal prompts the system to display the second number. A low encoded signal with a low hex1_num prompts the system to display the first number. 

![FSM Hexadecimal Display Controller Waveform](images/hex_num_controller_waveform.PNG)

This testbench tests if the adder works correctly. This is a simple combinational testbench that works fine. 
![Inputs Summed](images/led_sum_waveform.PNG)

This system testbench tests the entire design's effectiveness to a variety of switch inputs. Overall, this testbench design is very similar to the FSM testbench except for the fact that the high speeded oscillator clock is instantiated in this one. 
![Top Module Waveform](images/lab2_tk_image_closeup.PNG)

Overall, my design worked as planned and successfuly implemented the requirements in lab 2. This lab took me a total of 15 hours. 
The [source code](https://github.com/troyrkaufman/e155_lab2/tree/main/src) for the lab can be found here.

