---
title: "Lab 1"
description: "Seven Segement Display and LED logic"
author: "Troy Kaufman"
date: "9/3/24"
draft: false
---

![Full Lab 1 Setup](images/lab1_image_full.jpg)

# Summary
Lab 1 introduced students to the digital design world by giving them experience with FPGA design flow from creating block diagrams to synthesizing hardware on an FPGA. The main goals of this lab were to produce a 2.4 Hz blinking LED along with driving other LEDs based on XOR and AND logic. Additionally, a seven segment display would illustrate the current hexadecimal number input from the DIP switches located on the development board. 

Several SystemVerilog modules produced the necessary logic to perform the requirements, and circuit analysis was used to calculate component values to drive the seven segment display according to the Specs sheet. 

Overall, this lab took 9 hours to finish which included soldering the development board together and fixing ST-link/J-link issues along with the hardware design and debugging.

# Design
The first aspect to consider in the project was separating the design approaches for the two main goals: blinking an LED and driving a seven segment display. A top module would instantiate these two designs named led_controller and seg_decoder along with providing a high speed oscillator (48 MHz) developed by Lattice Radiant as seen in the BLOCK DIAGRAM BELOW. 

![System Block Diagram](images/block_diagram.jpg) 

The seven segment display source code (seg_decoder) could be handled by strictly utilizing combinational logic via a case statement. The seven segment display was cathode driven so +3V3 supplied voltage to the common anode while the seven bit signals were attatched to the display via current limiting resistors. The calculation for the resistor values is as follows: ADD BELOW EQUATION AND SCHEMATIC

![System Schematic](images/lab1_schematic.drawio.png)

![Current Limiting Resistor Calculations](images/resistor_calculations.jpg)

As for the blinking LED (led_controller), a counter was used to delay setting the LED. The calculation is the following: ADD BELOW CALCULATION

![Counter Limit Calculations](images/counter_limit.jpg)

The counter limit value determines the blinking frequency. A reset signal initializes the counter and LED state to both 0. Until the counter reached the desired limit, counter increments by 1 and the LED retains its value on each clock cycle. Once the limit is hit, the counter is reset and the LED's value is negated thus turning on/off at the desired freqeuncy. 

The additional goals included driving XOR and AND logic on LEDs which were produced by assign statements housed inside the LED controller source code. 

# Verification
To verify the design, an oscilloscope was used to measure the blinking LED's freqeuncy while testbenches stimulated the source code. The oscilloscope image below shows that the LED was blinking at 2.404 Hz - well within the vicinity to be considered acceptable. ADD BELOW 

![Oscilloscope trace of a 2.4 Hz signal](images/blinking_led_freq.jpg)

The seg_decoder module was tested by inputting all possible switch combinations (2^4). The designer would have to manually verify that the module works as intended by analyzing the XOR and AND LED signals.

ADD in seg_decoder testbench image

Furthermore, a testbench was created for the seg_controller which now included a custom ~48MHz clock to run the sequential logic. The Lattice HSOSC library couldn't be accessed, so a makeshift one was created. Once again, all switch combinations were supplied to the module so that the designer could check if each hexadecimal output was correct. 

ADD in led_controller testbench image