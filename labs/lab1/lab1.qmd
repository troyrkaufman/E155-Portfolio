---
title: "Lab 1"
description: "Seven Segement Display and LED logic"
author: "Troy Kaufman"
date: "9/3/24"
draft: false
---


![Image of Lab 1 Setup](images/lab1_image_full.jpg)

# Summary
Lab 1 introduced students to the digital design world by giving them experience with FPGA design flow from creating block diagrams to synthesizing hardware on an FPGA. The main goals of this lab were to produce a 2.4 Hz blinking LED along with driving other LEDs based on XOR and AND logic. Additionally, a seven segment display would illustrate the current hexadecimal number input from the DIP switches located on the development board. 

Several SystemVerilog modules produced the necessary logic to perform the requirements, and circuit analysis was used to calculate component values to drive the seven segment display according to the Specs sheet. 

Overall, this lab took 9 hours to finish which included soldering the development board together and fixing ST-link/J-link issues along with the hardware design and debugging.

# Design
The first aspect to consider in the project was separating the design approaches for the two main goals: blinking an LED and driving a seven segment display. A top module would instantiate these two designs named led_controller and seg_decoder along with providing a high speed oscillator (48 MHz) developed by Lattice Radiant as seen in the BLOCK DIAGRAM BELOW. 

![System Block Diagram](images/block_diagram.jpg) 

The seven segment display source code (seg_decoder) could be handled by strictly utilizing combinational logic via a case statement. The seven segment display was cathode driven, so, +3V3 supplied voltage to the common anode while the seven bit signals were attatched to the display via current limiting resistors. The calculation for the resistor values is as follows:

![Current Limiting Resistor Calculations](images/resistor_calculations.jpg)

Where Vcc is the voltage source, Vd is the voltage drop across the LED, I is the desired current, and Rn is the resistor value. Solving for Rn gave a resistance value of 60 ohms for the current limiting resistors. These components contributed to the overall schematic as seen below: 

![System Schematic](images/lab1_schematic.jpg)

The DIP switches, reset button, and LEDs with current limiting resistors are shown in Prof. Brake's schematic for the development board linked [here](https://hmc-e155.github.io/assets/doc/E155%20Development%20Board%20Schematic.pdf). 

As for the blinking LED (led_controller), a counter was used to delay setting the LED. The calculation is the following:

![Counter Limit Calculations](images/counter_limit.jpg)

The counter limit value determines the blinking frequency with the associated clock. A reset signal initializes the counter and LED state to both 0. Until the counter reaches the desired limit, the counter increments by 1 and the LED retains its value on each clock cycle. Once the limit is achieved, the counter is reset and the LED's value is negated thus turning the LED on/off at the desired freqeuncy. 

The additional goals included driving XOR and AND logic on LEDs which were produced by assign statements housed inside the LED controller source code. 

# Verification
To verify the design, an oscilloscope was used to measure the blinking LED's freqeuncy while testbenches stimulated the source code. 

The oscilloscope image below shows that the LED was blinking at 2.404 Hz - well within the vicinity to be considered acceptable.

![Oscilloscope trace of a 2.4 Hz signal](images/blinking_led_freq.jpg)

The seg_decoder module was tested by inputting all possible switch combinations (2^4). The designer would have to manually verify that the module worked as intended by checking if each hexadecimal output was correct for each successive input.

![seg_decoder Waveform](images/seg_decoder_tb_image.jpg)

Furthermore, a testbench was created for the led_controller which now included a custom ~48MHz clock to run the sequential logic. The Lattice HSOSC library couldn't be accessed, so a makeshift one was created. Once again, all switch combinations were supplied to the module so that the designer could analyze the XOR and AND logic. If one wished to observe the 2.4 Hz behavior for the third LED, they could do so if they had all day to wait.

![led_controller Waveform](images/led_controller_tb_image.jpg)

Finally, a system testbench was made to test the two submodules together. This testbench contained the same stimulus package as the led_controller testbench had. 

![Top Module Waveform](images/lab1_tk_tb_image.jpg)

The verification for all submodules and top module were successful including the oscilloscope test mentioned above. All requirements were satisfied. 